generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@map("sessions")
}

enum ROLES {
  EMPLOYER
  EMPLOYEES
  PUBLIC
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(Employee)
  employer  User?     @relation("EmployerEmployees", fields: [userId], references: [id])
  employees User[]    @relation("EmployerEmployees")
  tasks     Task[]    @relation("TaskAssignee")
  Account   Account[]
  Session   Session[]
  userId    String?
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  taskGroupId String?
  taskGroup   TaskGroup? @relation(fields: [taskGroupId], references: [id])
}

model TaskGroup {
  id   String @id @default(uuid())
  name String
  Task Task[]
}

enum Role {
  Employee
  Employer
}
