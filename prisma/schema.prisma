generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum ROLES {
  EMPLOYER
  EMPLOYEES
  PUBLIC
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  image         String
  password      String?
  emailVerified DateTime? @map("email_verified")
  name          String?
  lastName      String?
  tasks         Task[]    @relation("TaskEmployees")
  accounts      Account[]
  sessions      Session[]
  role          ROLES     @default(PUBLIC)

  ownerCompanies Company[]

  employeeCompany   Company? @relation("CompanyEmployees", fields: [employeeCompanyId], references: [id])
  employeeCompanyId String?
  ownerTasks        Task[]   @relation("TaskOwner")

  @@map("users")
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  taskGroups TaskGroup[]

  owners User[]

  employees User[] @relation("CompanyEmployees")
}

enum TASK_STATUS {
  NOT_STARTED
  STARTED
  COMPLETED
}

enum TASK_GROUP_TYPE {
  EMPLOYEE_TASKGROUP
  SUBCONTRACTER_TASKGROUP
}

model TaskGroup {
  id    String @id @default(uuid())
  name  String
  tasks Task[]

  order Int? @default(0)

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  type TASK_GROUP_TYPE @default(EMPLOYEE_TASKGROUP)

  @@unique([companyId, name])
  @@index([companyId, id])
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[] @relation("TaskEmployees")

  ownerId String
  owner   User   @relation("TaskOwner", fields: [ownerId], references: [id])

  status      TASK_STATUS @default(NOT_STARTED)
  name        String?
  description String?

  startDate DateTime  @default(now())
  endDate   DateTime?

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  due         DateTime?
  deleted     Boolean    @default(false)
  taskGroup   TaskGroup? @relation(fields: [taskGroupId], references: [id])
  taskGroupId String?

  @@index([ownerId])
}

model Coords {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Int
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?
}

model Address {
  id      String   @id @default(uuid())
  address String
  city    String
  zipCode String
  coords  Coords[]
  tasks   Task[]
}
